"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("./index"));
// const automizer = (outputName) =>
//   new Automizer({
//     templateDir: `${__dirname}/../__tests__/pptx-templates`,
//     outputDir: `${__dirname}/../__tests__/pptx-output`,
//     // You can enable 'archiveType' and set mode: 'fs'
//     // This will extract all templates and output to disk.
//     // It will not improve performance, but it can help debugging:
//     // You don't have to manually extract pptx contents, which can
//     // be annoying if you need to look inside your files.
//     archiveType: {
//       mode: 'fs',
//       baseDir: `${__dirname}/../__tests__/pptx-cache`,
//       workDir: outputName,
//       // cleanupWorkDir: true,
//     },
//     rootTemplate: 'RootTemplate.pptx',
//     presTemplates: [`SlidesWithAdditionalMaster.pptx`],
//     removeExistingSlides: true,
//     autoImportSlideMasters: true,
//     cleanup: false,
//     compression: 0,
//   });
const run = () => __awaiter(void 0, void 0, void 0, function* () {
    const automizer = new index_1.default({
        templateDir: `${__dirname}/../__tests__/pptx-templates`,
        outputDir: `${__dirname}/../__tests__/pptx-output`,
        // autoImportSlideMasters: true,
        showIntegrityInfo: true,
        assertRelatedContents: true,
        useCreationIds: true,
        // archiveType: {
        //   mode: 'fs',
        //   baseDir: `${__dirname}/../__tests__/pptx-cache`,
        //   workDir: `add-slide-master-auto-import.test.pptx`,
        //   // cleanupWorkDir: true,
        // },
    });
    const pres = yield automizer
        .loadRoot(`EmptyTemplate.pptx`)
        .load('SlideMasters.pptx')
        .load('SlidesWithAdditionalMaster.pptx')
        .addSlide('SlidesWithAdditionalMaster.pptx', 1, (slide) => {
        slide.useSlideLayout('Leer');
    })
        .write(`add-slide-master-auto-import.test.pptx`);
});
run().catch((error) => {
    console.error(error);
});
//# sourceMappingURL=dev.js.map