"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XmlSlideHelper = void 0;
/**
 * Class that represents an XML slide helper
 */
class XmlSlideHelper {
    /**
     * Constructor for the XmlSlideHelper class.
     * @param {XmlDocument} slideXml - The slide XML document to be used by the helper.
     */
    constructor(slideXml) {
        if (!slideXml) {
            throw Error('Slide XML is not defined');
        }
        this.slideXml = slideXml;
    }
    /**
     * Get all text element IDs from the slide.
     * @param {boolean} [useCreationIds=false] - If true, use creation IDs when available; otherwise, use element names.
     * @return {string[]} An array of text element IDs.
     */
    getAllTextElementIds(useCreationIds = false) {
        const elementIds = [];
        try {
            const shapeNodes = this.slideXml.getElementsByTagNameNS('http://schemas.openxmlformats.org/presentationml/2006/main', 'sp');
            for (let i = 0; i < shapeNodes.length; i++) {
                const shapeNode = shapeNodes.item(i);
                const txBody = shapeNode
                    .getElementsByTagNameNS('http://schemas.openxmlformats.org/presentationml/2006/main', 'txBody')
                    .item(0);
                // .. if the shape node contains a text body
                if (txBody) {
                    const cNvPr = shapeNode
                        .getElementsByTagNameNS('http://schemas.openxmlformats.org/presentationml/2006/main', 'cNvPr')
                        .item(0);
                    // Check if the shape node contains a non-visual drawing properties element
                    if (cNvPr) {
                        let id;
                        if (useCreationIds) {
                            const creationIds = cNvPr.getElementsByTagName('a16:creationId');
                            id = creationIds.item(0).getAttribute('id');
                        }
                        else {
                            id = cNvPr.getAttribute('name');
                        }
                        // Add the ID to the elementIds array if it exists, else warn but dont break,
                        if (id) {
                            elementIds.push(id);
                        }
                        else {
                            console.warn('Element ID is missing for a text element');
                        }
                    }
                }
            }
        }
        catch (error) {
            throw new Error(`Failed to retrieve text element IDs: ${error.message}`);
        }
        return elementIds;
    }
}
exports.XmlSlideHelper = XmlSlideHelper;
//# sourceMappingURL=xml-slide-helper.js.map