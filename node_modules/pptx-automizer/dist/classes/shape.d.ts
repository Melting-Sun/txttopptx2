import { ImportedElement, ShapeModificationCallback, ShapeTargetType, Target, Workbook } from '../types/types';
import { RootPresTemplate } from '../interfaces/root-pres-template';
import { HelperElement, XmlDocument, XmlElement } from '../types/xml-types';
import { ImageTypeMap } from '../enums/image-type-map';
import { ElementSubtype } from '../enums/element-type';
import IArchive from '../interfaces/iarchive';
export declare class Shape {
    mode: string;
    name: string;
    sourceArchive: IArchive;
    sourceSlideNumber: number;
    sourceSlideFile: string;
    sourceNumber: number;
    sourceFile: string;
    sourceRid: string;
    sourceElement: XmlDocument;
    targetFile: string;
    targetArchive: IArchive;
    targetTemplate: RootPresTemplate;
    targetSlideNumber: number;
    targetNumber: number;
    targetSlideFile: string;
    targetSlideRelFile: string;
    createdRid: string;
    relRootTag: string;
    relAttribute: string;
    relParent: (element: XmlElement) => XmlElement;
    targetElement: XmlDocument;
    targetType: ShapeTargetType;
    target: Target;
    callbacks: ShapeModificationCallback[];
    hasCreationId: boolean;
    contentTypeMap: typeof ImageTypeMap;
    subtype: ElementSubtype;
    constructor(shape: ImportedElement, targetType: ShapeTargetType);
    setTarget(targetTemplate: RootPresTemplate, targetSlideNumber: number): Promise<void>;
    setTargetElement(): Promise<void>;
    appendToSlideTree(): Promise<void>;
    replaceIntoSlideTree(): Promise<void>;
    removeFromSlideTree(): Promise<void>;
    modifySlideTree(insertBefore?: boolean): Promise<void>;
    updateElementsRelId(): Promise<void>;
    getElementsByRid(slideXml: XmlDocument, rId: string): Promise<XmlElement[]>;
    updateTargetElementRelId(): Promise<void>;
    applyCallbacks(callbacks: ShapeModificationCallback[], element: XmlDocument, arg1?: XmlDocument, arg2?: Workbook): void;
    appendImageExtensionToContentType(extension: any): Promise<HelperElement | boolean>;
}
